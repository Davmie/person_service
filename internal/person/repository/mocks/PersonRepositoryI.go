// Code generated by mockery v2.33.2. DO NOT EDIT.

package mocks

import (
	models "github.com/Davmie/person_service/models"
	mock "github.com/stretchr/testify/mock"
)

// PersonRepositoryI is an autogenerated mock type for the PersonRepositoryI type
type PersonRepositoryI struct {
	mock.Mock
}

// Create provides a mock function with given fields: a
func (_m *PersonRepositoryI) Create(a *models.Person) error {
	ret := _m.Called(a)

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.Person) error); ok {
		r0 = rf(a)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: id
func (_m *PersonRepositoryI) Delete(id int) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: id
func (_m *PersonRepositoryI) Get(id int) (*models.Person, error) {
	ret := _m.Called(id)

	var r0 *models.Person
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (*models.Person, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int) *models.Person); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Person)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAll provides a mock function with given fields:
func (_m *PersonRepositoryI) GetAll() ([]*models.Person, error) {
	ret := _m.Called()

	var r0 []*models.Person
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]*models.Person, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []*models.Person); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Person)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: a
func (_m *PersonRepositoryI) Update(a *models.Person) error {
	ret := _m.Called(a)

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.Person) error); ok {
		r0 = rf(a)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewPersonRepositoryI creates a new instance of PersonRepositoryI. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPersonRepositoryI(t interface {
	mock.TestingT
	Cleanup(func())
}) *PersonRepositoryI {
	mock := &PersonRepositoryI{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
